{"./":{"url":"./","title":"Introduction","keywords":"","body":"私のメモ めもめも "},"aws/":{"url":"aws/","title":"AWS","keywords":"","body":"AWS (Amazon Web Services) Advanced Architecting on AWS AWS Pricing Calculator Amazon ECR Public Gallery EKS Charts ホワイトペーパーとガイド マルチアカウントについて AWS Well-Architected Organization https://tbekas.dev/posts/setting-up-an-aws-organization-from-scratch-with-terraform https://github.com/tbekas/aws-organization-example https://aws.amazon.com/jp/blogs/mt/aws-organizations-aws-config-and-terraform/ https://dev.classmethod.jp/articles/aws-organizations-with-terraform/ https://github.com/cloudposse/terraform-aws-organization-access-role https://zenn.dev/wim/articles/aws_landing_zone_with_terraform [遂に来た！]Control Towerが東京リージョンに対応してAWSマルチアカウントの管理が捗るのでやってみた Control Tower Workshops https://aws.amazon.com/jp/solutions/implementations/aws-landing-zone/ https://aws.amazon.com/jp/about-aws/whats-new/2018/06/introducing-aws-landing-zone/ マルチアカウント環境をらくらく統制！AWS Control Towerの一般提供が開始されました！ AWS Organizations, AWS Config, and Terraform (AWS Blog) セルフマネージド型 Active Directory を AWS Control Tower に拡張 Online 学習 https://aws.amazon.com/jp/training/digital/ https://www.aws.training/ https://aws.amazon.com/jp/training/self-paced-labs/ https://aws.amazon.com/jp/whitepapers/ Others WikiLeaksがAWSのデータセンター所在地を暴露したので詳細を見る "},"aws/ec2.html":{"url":"aws/ec2.html","title":"EC2","keywords":"","body":"EC2 SessionManager と send-ssh-public-key を組み合わせて SSH 接続する send-ssh-public-key での public key 登録 aws ec2-instance-connect send-ssh-public-key コマンドで一時的 (60秒間だけ有効) な public key の登録が可能 aws ec2-instance-connect send-ssh-public-key \\ --instance-id i-xxxxxxxxxxxxxxxxx \\ --instance-os-user ec2-user \\ --availability-zone ap-northeast-1c \\ --ssh-public-key file://$HOME/.ssh/id_rsa.pub availability-zone をいちいち指定するのは面倒なので instance-id から aws コマンドで取得する aws ec2 describe-instances \\ --instance-ids i-xxxxxxxxxxxxxxxxx \\ --query 'Reservations[0].Instances[0].Placement.AvailabilityZone' \\ --output text Instance Id 一覧の取得 aws ec2 describe-instances \\ --query 'Reservations[].Instances[].InstanceId, Reservations[].Instances[].InstanceType' \\ --output text "},"aws/route53.html":{"url":"aws/route53.html","title":"Route53","keywords":"","body":"Route53 CLI によるレコードの更新 # zone id の取得 domain=example.com zone_id=$(basename $(aws route53 list-hosted-zones-by-name --dns-name ${domain} | jq -r \".HostedZones[] | select(.Config.PrivateZone == false) | select(.Name == \\\"${domain}.\\\") | .Id\")) { \"Changes\": [ { \"Action\": \"UPSERT\", \"ResourceRecordSet\": { \"Name\": \"www.example.com\", \"Type\": \"A\", \"TTL\": 60, \"ResourceRecords\": [ { \"Value\": \"192.168.0.1\" }, { \"Value\": \"192.168.0.2\" } ] } } ] } aws route53 change-resource-record-sets --hosted-zone-id $zone_id --change-batch file://request.json DELETE 時にも結構全部必須とされる % aws route53 change-resource-record-sets --hosted-zone-id $zone_id --change-batch ' { \"Changes\": [ { \"Action\": \"DELETE\", \"ResourceRecordSet\": { \"Name\": \"www.example.com.\", \"Type\": \"CNAME\", \"TTL\": 600, \"ResourceRecords\": [ { \"Value\": \"xxxx-1671238278.ap-northeast-1.elb.amazonaws.com\" } ] } } ] } ' レスポンス { \"ChangeInfo\": { \"Id\": \"/change/C09876892V612NX8953V2\", \"Status\": \"PENDING\", \"SubmittedAt\": \"2021-03-02T02:03:41.597000+00:00\" } } get-change で伝搬の状態を確認できる % aws route53 get-change --id /change/C09876892V612NX8953V2 { \"ChangeInfo\": { \"Id\": \"/change/C09876892V612NX8953V2\", \"Status\": \"PENDING\", \"SubmittedAt\": \"2021-03-02T02:03:41.597000+00:00\" } } INSYNC になったら完了 % aws route53 get-change --id /change/C09876892V612NX8953V2 { \"ChangeInfo\": { \"Id\": \"/change/C09876892V612NX8953V2\", \"Status\": \"INSYNC\", \"SubmittedAt\": \"2021-03-02T02:03:41.597000+00:00\" } } % aws route53 list-resource-record-sets --hosted-zone-id $zone_id --query \"ResourceRecordSets[?Name == 'www.example.com.']\" [ { \"Name\": \"www.example.com.\", \"Type\": \"CNAME\", \"TTL\": 600, \"ResourceRecords\": [ { \"Value\": \"xxxx-1671238278.ap-northeast-1.elb.amazonaws.com\" } ] } ] "},"aws/firehose.html":{"url":"aws/firehose.html","title":"Firehose","keywords":"","body":"Kinesis Firehose AWS Kinesis Firehoseでログ欠損しないために Monitoring the Amazon Kinesis Data Streams Service with Amazon CloudWatch "},"aws/ecs.html":{"url":"aws/ecs.html","title":"ECS","keywords":"","body":"ECS (Elastic Container Service) Amazon ECS クラスターの Auto Scaling を深く探る (AWS Blog) Deep Dive on Amazon ECS Cluster Auto Scaling Amazon ECS cluster auto scaling Amazon ECS capacity providers Terraform ecs_capacity_provider ECS Capacity Auto ScalingをTerraformで実装する 新機能 – AWS ECS Cluster Auto ScalingによるECSクラスターの自動スケーリング (AWS Blog) Perfecting smooth rolling updates in Amazon Elastic Container Service 2019.8.27 "},"aws/bookmarks.html":{"url":"aws/bookmarks.html","title":"読み物","keywords":"","body":"Bookmarks 「AWSの深いところ見せちゃいます！ by AWSクラウドサポートエンジニア」連載一覧https://codezine.jp/article/corner/685 "},"gcp/":{"url":"gcp/","title":"GCP","keywords":"","body":"GCP (Google Cloud Platform) https://developers.google.com/learn/pathways Google Cloud Load BalancerのTIPS Tuning NGINX behind Google Cloud Platform HTTP(S) Load Balancer Cloud Run and Load balancing: go beyond your own project! 最新版のセキュリティ基盤ブループリントに沿って Google Cloud 環境にセキュリティを組み込む Terraform で GCP IAM 設定どれ使うのがいいのか GCPのサービスアカウントがどんな権限を持っているか確認する方法 How to find, list, or search resources across services (APIs) and projects in Google Cloud Platform? Monitoring Cloud Monitoring Dashboard Samples Cloud Operations Sandbox log-based metrics 分布指標のグラフ化 BigQuery BigQuery にデータを差分ロード（UPSERT）する方法まとめ "},"gcp/gcloud.html":{"url":"gcp/gcloud.html","title":"gcloud","keywords":"","body":"gcloud エンタープライズ企業のベスト プラクティス https://cloud.google.com/docs/enterprise/best-practices-for-enterprise-organizations Google Cloud 設定のチェックリスト https://cloud.google.com/docs/enterprise/onboarding-checklist Google Cloud で解決する https://cloud.google.com/docs/tutorials ディレクトリ デフォルトでは ~/.config/gcloud に設定ファイルとか認証情報の類が配置される gcloud init コマンドを実行することで初期化することができるが、この設定情報は複数持って切り替えることができる $ gcloud config configurations ERROR: (gcloud.config.configurations) Command name argument expected. Available commands for gcloud config configurations: activate Activates an existing named configuration. create Creates a new named configuration. delete Deletes a named configuration. describe Describes a named configuration by listing its properties. list Lists existing named configurations. For detailed information on this command and its flags, run: gcloud config configurations --help また、このディレクトリは環境変数 CLOUDSDK_CONFIG で変更することができる ディレクトリ切り替えスクリプト function gcenv { case \"$1\" in create) if [ -z \"$2\" ] ; then echo \"Usage: gcenv create \" 1>&2 return 1 fi if [ ! -d \"$HOME/.gcloud/$2\" ] ; then mkdir -p \"$HOME/.gcloud/$2\" export CLOUDSDK_CONFIG=\"$HOME/.gcloud/$2\" else echo \"already exists\" 1>&2 return 0 fi ;; show) echo \"CLOUDSDK_CONFIG=${CLOUDSDK_CONFIG}\" echo \"GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}\" ;; list|ls) ls -d $HOME/.gcloud/* ;; /*) if [ -d \"$1\" ] ; then export CLOUDSDK_CONFIG=\"$1\" fi ;; *) if [ -z \"$1\" ] ; then export CLOUDSDK_CONFIG=$(ls -d $HOME/.gcloud/* | sort | fzf) elif [ -d \"$HOME/.gcloud/$1\" ] ; then export CLOUDSDK_CONFIG=\"$HOME/.gcloud/$1\" else export CLOUDSDK_CONFIG=$(ls -d $HOME/.gcloud/* | sort | fzf) fi ;; esac if [ -n \"${CLOUDSDK_CONFIG}\" ] ; then if [ -f \"${CLOUDSDK_CONFIG}/application_default_credentials.json\" ] ; then export GOOGLE_APPLICATION_CREDENTIALS=\"${CLOUDSDK_CONFIG}/application_default_credentials.json\" fi fi } 認証 gcloud コマンドなどで GCP の API にアクセスするためにはログインが必要で、次のコマンドでログインすることができる gcloud auth login --no-launch-browser --no-launch-browser をつけない場合は最後に使ったブラウザで承認ウインドウが開くため、複数プロファイルで ブラウザを使っている場合には嬉しくないことがある サービスアカウント Terraform などを使う場合は ServiceAccount が必要になるが Google Account や Cloud Identity、Google Workspace (G Suite) のアカウントでやりたい そういう場合に default credential というものが使える 次のコマンドで ~/.config/gcloud/application_default_credentials.json に作成される ディレクトリは CLOUDSDK_CONFIG が設定されていればそこに作成される gcloud auth application-default login --no-launch-browser これで作成されたファイルの PATH を環境変数 GOOGLE_APPLICATION_CREDENTIALS に設定する Project 設定 現在の config の project を変更するには次のコマンドを使う gcloud config set project PROJECT-ID 現在の設定確認 gcloud config list gcloud config configurations コマンドで config は複数持って切り替えることが可能 ただし、ファイルに書かれるため shell ごとに切り替えたいという場合はディレクトリを分けて 環境変数 CLOUDSDK_CONFIG で切り替える必要がある ServiceAccount の権限確認 gcloud asset search-all-iam-policies \\ --query 'policy:\"aerviceAccount:SERViCE-ACCOUNT-NAME@PROJECT-ID.iam.gserviceaccount.com\"' https://cloud.google.com/asset-inventory/docs/searching-iam-policies "},"gcp/gke/anetd.html":{"url":"gcp/gke/anetd.html","title":"anetd","keywords":"","body":"anetd DaemonSet 実体は Cilium (k8s-app: cilium) % k get cm cilium-config -o yaml | neat apiVersion: v1 data: auto-direct-node-routes: \"false\" blacklist-conflicting-routes: \"false\" bpf-lb-sock-hostns-only: \"true\" bpf-map-dynamic-size-ratio: \"0.0025\" bpf-policy-map-max: \"16384\" cluster-name: default cni-chaining-mode: generic-veth custom-cni-conf: \"true\" debug: \"false\" enable-auto-protect-node-port-range: \"true\" enable-bpf-clock-probe: \"true\" enable-bpf-masquerade: \"false\" enable-endpoint-health-checking: \"false\" enable-endpoint-routes: \"true\" enable-host-firewall: \"false\" enable-hubble: \"true\" enable-ipv4: \"true\" enable-ipv6: \"false\" enable-local-node-route: \"false\" enable-local-redirect-policy: \"true\" enable-metrics: \"true\" enable-redirect-service: \"true\" enable-remote-node-identity: \"true\" enable-well-known-identities: \"false\" enable-xt-socket-fallback: \"true\" identity-allocation-mode: crd install-iptables-rules: \"true\" ipam: kubernetes k8s-api-server: https://172.31.254.2:443 k8s-require-ipv4-pod-cidr: \"true\" k8s-require-ipv6-pod-cidr: \"false\" kube-proxy-replacement: strict local-router-ip: 169.254.4.6 masquerade: \"false\" monitor-aggregation: medium monitor-aggregation-flags: all monitor-aggregation-interval: 5s node-port-bind-protection: \"true\" operator-api-serve-addr: 127.0.0.1:9234 operator-prometheus-serve-addr: :6942 preallocate-bpf-maps: \"false\" prometheus-serve-addr: :9990 sidecar-istio-proxy-image: cilium/istio_proxy tofqdns-enable-poller: \"false\" tunnel: disabled wait-bpf-mount: \"false\" kind: ConfigMap metadata: labels: addonmanager.kubernetes.io/mode: Reconcile name: cilium-config namespace: kube-system "},"gcp/gke/netd.html":{"url":"gcp/gke/netd.html","title":"netd","keywords":"","body":"netd DaemonSet https://github.com/GoogleCloudPlatform/netd % k get cm netd-config -o yaml | neat apiVersion: v1 data: cni_spec_name: 10-gke-ptp.conflist cni_spec_template: |- { \"name\": \"gke-pod-network\", \"cniVersion\": \"0.3.1\", \"plugins\": [ { \"type\": \"@cniType\", \"mtu\": @mtu, \"ipam\": { \"type\": \"host-local\", \"ranges\": [ @ipv4Subnet@ipv6SubnetOptional ], \"routes\": [ {\"dst\": \"0.0.0.0/0\"}@ipv6RouteOptional ] } }, { \"type\": \"portmap\", \"capabilities\": { \"portMappings\": true } }@cniBandwidthPlugin@cniCiliumPlugin ] } enable_bandwidth_plugin: \"true\" enable_calico_network_policy: \"false\" enable_cilium_plugin: \"true\" enable_masquerade: \"false\" enable_policy_routing: \"true\" enable_private_ipv6_access: \"false\" master_ip: 172.31.254.2 reconcile_interval_seconds: 60s kind: ConfigMap metadata: labels: addonmanager.kubernetes.io/mode: Reconcile name: netd-config namespace: kube-system "},"gcp/gke/dns.html":{"url":"gcp/gke/dns.html","title":"dns","keywords":"","body":"DNS GKE の DNS サーバー (kube-dns) は skydns で、kube-dns-autoscaler が必要に応じて pod の数を増やす。 さらには node-local-dns を addon で有効にすることで DaemonSet がデプロイされる。 "},"azure/":{"url":"azure/","title":"Azure","keywords":"","body":"Azure AZ LOGIN az login [-u user@domain] AZ ACCOUNT SHOW 今どのアカウントでログインしているかなどの確認 az account show AKS の KUBECONFIG 取得 az aks get-credentials --resource-group myResourceGroup --name myAKSCluster clusterAdmin az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --admin AAD https://github.com/Azure/aad-pod-identity Microsoft のクラウド Azure の入門講座を和訳した (後編) https://qiita.com/chomado/items/439eeea4b3ce318fb5a8 "},"azure/aks.html":{"url":"azure/aks.html","title":"AKS","keywords":"","body":"Azure Kubernetes Service (AKS) https://docs.microsoft.com/ja-jp/azure/aks/ "},"azure/data-explorer.html":{"url":"azure/data-explorer.html","title":"data-explorer","keywords":"","body":"Azure Data Explorer https://docs.microsoft.com/ja-jp/azure/data-explorer/ Kusto https://docs.microsoft.com/ja-jp/azure/data-explorer/kusto/concepts/ "},"azure/monitor.html":{"url":"azure/monitor.html","title":"Azure Monitor","keywords":"","body":"Azure Monitor https://docs.microsoft.com/ja-jp/azure/azure-monitor/ https://docs.microsoft.com/ja-jp/azure/azure-monitor/cli-samples "},"azure/storage.html":{"url":"azure/storage.html","title":"Azure Storage","keywords":"","body":"Azure Storage Amazon S3 や Google Cloud Storage 同様、Storage Account 名は Global でユニークである必要がある ただし、Azure の場合はアルファベットの小文字と数字しか使えず、3文字から24文字までにする必要がある Redundancy https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy durability は高いが availability は 99.9% 程度 Locally-redundant storage (LRS) 単一データセンター内に3つのコピーを持つ 99.999999999% (11 nines) durability (耐久性) (年間) 最も低コスト サーバー、ラック、ストレージの故障に対応 書き込みは 3 つのコピーへの書き込みが完了してからレスポンスが返される Zone-redundant storage (ZRS) リージョン内の 3 つの AZ にコピーが保存される 99.9999999999% (12 9's) over の durability (耐久性) (年間) Zone 障害に備えて exponential back-off つきの retry を検討するべし 書き込みは 3 つの AZ のコピーが完了してからレスポンスが返される 全てのリージョン、全ての Storage account type がサポートされているわけではない 例えば Japan East は対応しているが Japan West は非対応 (2021-03-03) Geo-redundant storage (GRS) Secondary リージョンへ複製を持つことでリージョン障害への耐性を持つ Primary リージョンと Secondary リージョンの組みは決まっており、任意の組み合わせを選択することはできない Primary, Secondary それぞれで LRS (特定ゾーン内での3つのコピー) が保持される 単一ゾーン内にしか保存されないため、リージョン障害でなくても Secondary へ切り替える必要が発生する可能性がある Secondary リージョンのデータへアクセスするためにはフェイルオーバーを行う必要がある 99.99999999999999% (16 9's) over の durability (耐久性) (年間) 書き込みは Primary の LRS への書き込み完了後に非同期で Secondary にコピーされる https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#read-access-to-data-in-the-secondary-region https://docs.microsoft.com/en-us/azure/storage/common/storage-disaster-recovery-guidance Geo-zone-redundant storage (GZRS) GRS との違いは Primary が ZRS (3つのゾーンにコピー) されることだけ Secondary は LRS (単一ゾーン内の3つのコピー) general-purpose v2 storage accounts だけをサポート 対応リージョン Asia Southeast Europe North Europe West Japan East UK South US Central US East US East 2 US West 2 Data integrity 定期的に cyclic redundancy checks (CRCs) でチェックされており、不整合が見つかればコピーから復元される Types of storage accounts Terraform では account_kind という項目 General-purpose v2 accounts BLOB、ファイル、キュー、およびテーブルの基本的なストレージアカウントタイプ AzureStorage を使用するほとんどのシナリオに推奨される General-purpose v1 accounts General-purpose v2 を使うべき BlockBlobStorage accounts Block BLOB および Append BLOB の優れたパフォーマンス特性を備えたストレージアカウント トランザクション率が高いシナリオ、またはより小さなオブジェクトを使用するシナリオ、または一貫して低いストレージレイテンシを必要とするシナリオに推奨される FileStorage accounts プレミアムパフォーマンス特性を備えたファイルのみのストレージアカウント エンタープライズまたは高性能スケールのアプリケーションに推奨される BlobStorage accounts General-purpose v2 を使うべき FileStorage と BlockBlobStorage では account tier を Premium にする必要がある "},"azure/storage-cli.html":{"url":"azure/storage-cli.html","title":"CLI","keywords":"","body":"Azure Storage CLI "},"debian/":{"url":"debian/","title":"Debian","keywords":"","body":"Debian (Ubuntu) パッケージに含まれるファイルを確認する dpkg-query -L dpkg-deb -c インストールされていないパッケージの場合 sudo apt-get install apt-file sudo apt-file update この後 apt-file list あのファイル、どのパッケージかな？を探す sudo apt-get install apt-file sudo apt-file update apt-file search FILENAME あの command をインストール telnet "},"postgresql/":{"url":"postgresql/","title":"PostgreSQL","keywords":"","body":"PostgreSQL https://postgresqlco.nf/ random_page_cost http://innerlife.io/fault-tolerant-postgresql-cluster-part1/ Synchronous Replication in PostgreSQL (crunchydata) "},"postgresql/anonymizer.html":{"url":"postgresql/anonymizer.html","title":"anonymizer","keywords":"","body":"PostgreSQL anonymizer https://gitlab.com/dalibo/postgresql_anonymizer https://postgresql-anonymizer.readthedocs.io/en/latest/ https://www.postgresql.org/about/news/postgresql-anonymizer-06-pseudonymization-and-improved-anonymous-exports-2017/ https://qiita.com/tom-sato/items/0adbee0b79382945712e "},"postgresql/backup-and-restore.html":{"url":"postgresql/backup-and-restore.html","title":"backup and restore","keywords":"","body":"Backup and Restore Tools https://www.enterprisedb.com/products/postgresql-database-auto-backup-recovery-restore-script-tools https://www.sraoss.co.jp/tech-blog/pgsql/pg_rman/ "},"postgresql/barman.html":{"url":"postgresql/barman.html","title":"barman","keywords":"","body":"Barman https://www.pgbarman.org/ https://www.2ndquadrant.com/en/resources/barman/ "},"postgresql/clustering.html":{"url":"postgresql/clustering.html","title":"clustering","keywords":"","body":"Clustering "},"postgresql/repmgr.html":{"url":"postgresql/repmgr.html","title":"repmgr","keywords":"","body":"repmgr https://repmgr.org/ https://github.com/EnterpriseDB/repmgr Vagrant で試す RHEL8 [vagrant@db1 ~]$ sudo subscription-manager status +-------------------------------------------+ System Status Details +-------------------------------------------+ Overall Status: Unknown System Purpose Status: Unknown WARNING The yum/dnf plugins: /etc/dnf/plugins/subscription-manager.conf were automatically enabled for the benefit of Red Hat Subscription Management. If not desired, use \"subscription-manager config --rhsm.auto_enable_yum_plugins=0\" to block this behavior. [vagrant@db1 ~]$ sudo subscription-manager list +-------------------------------------------+ Installed Product Status +-------------------------------------------+ Product Name: Red Hat Enterprise Linux for x86_64 Product ID: 479 Version: 8.3 Arch: x86_64 Status: Unknown Status Details: Starts: Ends: [vagrant@db1 ~]$ sudo subscription-manager register --username rh-teraoka --password liss4VAUX@lo1supt --name db1 Registering to: subscription.rhsm.redhat.com:443/subscription The system has been registered with ID: 5ae1cb3b-fcdc-4674-85b0-54adbc684227 The registered system name is: db1 WARNING The yum/dnf plugins: /etc/dnf/plugins/subscription-manager.conf were automatically enabled for the benefit of Red Hat Subscription Management. If not desired, use \"subscription-manager config --rhsm.auto_enable_yum_plugins=0\" to block this behavior. [vagrant@db1 ~]$ sudo subscription-manager attach Installed Product Current Status: Product Name: Red Hat Enterprise Linux for x86_64 Status: Subscribed [vagrant@db1 ~]$ sudo subscription-manager list +-------------------------------------------+ Installed Product Status +-------------------------------------------+ Product Name: Red Hat Enterprise Linux for x86_64 Product ID: 479 Version: 8.3 Arch: x86_64 Status: Subscribed Status Details: Starts: 04/17/2021 Ends: 04/17/2022 Vagrantfile # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(\"2\") do |config| config.vm.box = \"generic/rhel8\" config.vm.define :db1 do |m| m.vm.hostname = \"db1\" m.vm.provider \"virtualbos\" do |v| v.memory = 512 end m.vm.network :private_network, ip: \"192.168.33.11\" m.vm.provision \"shell\", path: \"setup.sh\" end config.vm.define :db2 do |m| m.vm.hostname = \"db2\" m.vm.provider \"virtualbos\" do |v| v.memory = 512 end m.vm.network :private_network, ip: \"192.168.33.12\" m.vm.provision \"shell\", path: \"setup.sh\" end config.vm.define :db3 do |m| m.vm.hostname = \"db3\" m.vm.provider \"virtualbos\" do |v| v.memory = 512 end m.vm.network :private_network, ip: \"192.168.33.13\" m.vm.provision \"shell\", path: \"setup.sh\" end end "},"mysql/":{"url":"mysql/","title":"MySQL","keywords":"","body":"MySQL "},"kubernetes/":{"url":"kubernetes/","title":"Kubernetes","keywords":"","body":"Kubernetes Next PSP PodSecurityPolicy Deprecation: Past, Present, and Future k-rail kyverno gatekeeper packaging helmfile kubectl kubectl editしたくない人のためのkubectl patchコマンド https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/ kubeapp Helm でアプリをデプロイするための Web UI https://github.com/kubeapps/kubeapps How to Write Your Own CNI Plug-in with Bash https://www.altoros.com/blog/kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash/ Backup velero k10 Misc https://github.com/mittwald/kube-httpcache "},"rhel8/":{"url":"rhel8/","title":"Red Hat Enterprise Linux 8","keywords":"","body":"Red Hat Enterprise Linux 8 Red Hat Developer Program で 16 システムで RHEL 8 が使える https://rheb.hatenablog.com/entry/developer-program https://www.publickey1.jp/blog/21/red_hat_enterprise_linux16okred_hat.html dnf リポジトリを使う為には subscription 登録が必要 アカウント登録 https://developers.redhat.com/register https://developers.redhat.com/login https://access.redhat.com/management subscription-manager でシステムの登録 https://nwengblog.com/redhat-memo/ sudo subscription-manager register --username rh-teraoka --password PASSWORD [--name HOSTNAME] sudo subscription-manager attach https://access.redhat.com/management/systems で登録されたシステムを確認することができる 不要になったら remove と unregister で解除して clean でローカルのファイルをきれいにする（のかな） $ sudo subscription-manager remove --all 1 local certificate has been deleted. 1 subscription removed at the server. $ sudo subscription-manager unregister Unregistering from: subscription.rhsm.redhat.com:443/subscription System has been unregistered. $ sudo subscription-manager clean All local data removed Ansible でやる方法 https://qiita.com/hiroyuki_onodera/items/85c06d0d7a15aaea97a6 "},"terraform/":{"url":"terraform/","title":"Terraform","keywords":"","body":"Terraform https://learn.hashicorp.com/terraform Terraform Language Documentation 【Terraform】moduleのアンチパターンとそれに対するベストプラクティス5選 Google Cloud Google Cloud Platform Provider Terraform Google modules Google Cloud Project Factory Terraform Module GSuite enabled module AWS Terraform AWS modules "},"vault/":{"url":"vault/","title":"Vault","keywords":"","body":"Hashicorp Vault https://future-architect.github.io/articles/20190713/ https://learn.hashicorp.com/tutorials/vault/getting-started-help?in=vault/getting-started https://learn.hashicorp.com/tutorials/terraform/secrets-vault?in=vault/secrets-management https://learn.hashicorp.com/tutorials/vault/oidc-auth?in=vault/auth-methods https://learn.hashicorp.com/tutorials/vault/getting-started-policies https://github.com/hashicorp/vault-guides/tree/master/identity/oidc-auth Secret Engine path を指定して Secret Engine を有効にする。 デフォルトでは Secret Engine と同名の path で設定される。 例えば aws なら aws/ になる。 vault secrets enable -path=aws aws デフォルトでは secret/ という path で kv Engine が有効になっている % vault secrets list Path Type Accessor Description ---- ---- -------- ----------- aws/ aws aws_8d7be6d3 n/a cubbyhole/ cubbyhole cubbyhole_1cc2c6b0 per-token private secret storage identity/ identity identity_5c824d0b identity store secret/ kv kv_4e25297c key/value secret storage sys/ system system_30fd9b1a system endpoints used for control, policy and debugging Policy Policy でアクセスを制御する。Policy は HCL で定義する。 % vault policy list default root root policy には何も含まれていない。 The root policy does not contain any rules but can do anything within Vault. It should be used with extreme care. default は次のようになっている。 % vault policy read default # Allow tokens to look up their own properties path \"auth/token/lookup-self\" { capabilities = [\"read\"] } # Allow tokens to renew themselves path \"auth/token/renew-self\" { capabilities = [\"update\"] } # Allow tokens to revoke themselves path \"auth/token/revoke-self\" { capabilities = [\"update\"] } # Allow a token to look up its own capabilities on a path path \"sys/capabilities-self\" { capabilities = [\"update\"] } # Allow a token to look up its own entity by id or name path \"identity/entity/id/{{identity.entity.id}}\" { capabilities = [\"read\"] } path \"identity/entity/name/{{identity.entity.name}}\" { capabilities = [\"read\"] } # Allow a token to look up its resultant ACL from all policies. This is useful # for UIs. It is an internal path because the format may change at any time # based on how the internal ACL features and capabilities change. path \"sys/internal/ui/resultant-acl\" { capabilities = [\"read\"] } # Allow a token to renew a lease via lease_id in the request body; old path for # old clients, new path for newer path \"sys/renew\" { capabilities = [\"update\"] } path \"sys/leases/renew\" { capabilities = [\"update\"] } # Allow looking up lease properties. This requires knowing the lease ID ahead # of time and does not divulge any sensitive information. path \"sys/leases/lookup\" { capabilities = [\"update\"] } # Allow a token to manage its own cubbyhole path \"cubbyhole/*\" { capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"] } # Allow a token to wrap arbitrary values in a response-wrapping token path \"sys/wrapping/wrap\" { capabilities = [\"update\"] } # Allow a token to look up the creation time and TTL of a given # response-wrapping token path \"sys/wrapping/lookup\" { capabilities = [\"update\"] } # Allow a token to unwrap a response-wrapping token. This is a convenience to # avoid client token swapping since this is also part of the response wrapping # policy. path \"sys/wrapping/unwrap\" { capabilities = [\"update\"] } # Allow general purpose tools path \"sys/tools/hash\" { capabilities = [\"update\"] } path \"sys/tools/hash/*\" { capabilities = [\"update\"] } # Allow checking the status of a Control Group request if the user has the # accessor path \"sys/control-group/request\" { capabilities = [\"update\"] } Policy を作成する $ vault policy write my-policy - vault policy write -h でヘルプを確認することができる。 % vault policy list default my-policy root % vault policy read my-policy # Dev servers have version 2 of KV secrets engine mounted by default, so will # need these paths to grant permissions: path \"secret/data/*\" { capabilities = [\"create\", \"update\"] } path \"secret/data/foo\" { capabilities = [\"read\"] } Policy を指定して token を作成する % vault token create -policy=my-policy Key Value --- ----- token s.EcbgRDFEjvut2iLdUx83heYT token_accessor rc9HAxlw8i9HWKhn78P9kHip token_duration 768h token_renewable true token_policies [\"default\" \"my-policy\"] identity_policies [] policies [\"default\" \"my-policy\"] この token を使った場合は my-policy が適用される。 secret/ 配下への put は可能。(kv-v2 は data という subpath が入る) % VAULT_TOKEN=s.EcbgRDFEjvut2iLdUx83heYT vault kv put secret/creds password=\"my-long-password\" Key Value --- ----- created_time 2021-04-09T11:35:46.371454Z deletion_time n/a destroyed false version 1 secret/ 配下でも secret/data/foo は read しか許可していないため、put には失敗する。 % VAULT_TOKEN=s.EcbgRDFEjvut2iLdUx83heYT vault kv put secret/foo robot=beepboop Error writing data to secret/data/foo: Error making API request. URL: PUT http://127.0.0.1:8200/v1/secret/data/foo Code: 403. Errors: * 1 error occurred: * permission denied また、put した secret/creds も get はできない。 % VAULT_TOKEN=s.EcbgRDFEjvut2iLdUx83heYT vault kv get secret/creds Error reading secret/data/creds: Error making API request. URL: GET http://127.0.0.1:8200/v1/secret/data/creds Code: 403. Errors: * 1 error occurred: * permission denied sys への権限もないため、vault policy list や vault secrets list はエラーになる。 "},"locust/":{"url":"locust/","title":"locust","keywords":"","body":"locust token_string = \"token string\" resp = self.client.post( url=\"http://someserver\", data=json.dumps(data), auth=None, headers={\"authorization\": \"Token \" + token_string}, name=\"http://someserver\", ) "},"go/":{"url":"go/","title":"go","keywords":"","body":"Go クロスコンパイル GOOS, GOARCH を指定して go build する 環境変数の一覧は https://golang.org/doc/install/source#environment にある GOOS=windows GOARCH=amd64 Arm の場合は GOARM というのもある。Arm 環境でビルドするなら自動でその version がセットされるが、 クロスコンパイルの場合は設定すると良い。クロスコンパイルで未設定の場合は 6 になる。 うちの古いラズパイは armv6l なので GOOS=linux GOARCH=arm GOARM=6 とする。 armv6l の l は Little Endian の意味らしい。b の Big Endian もある。 % uname -m armv6l GitHub Actions での実行なら goreleaser が便利 Bookmarks Goを学ぶときにつまずきやすいポイントFAQ "},"circleci/":{"url":"circleci/","title":"CircleCI","keywords":"","body":"Circle CI Orb circleci/aws-ecr https://circleci.com/docs/ja/2.0/ecs-ecr/ github.com/CircleCI-Public/aws-ecr-orb circleci/docker circleci/aws-cli Bookmarks CircleCI を設定する Executor タイプを選択する 再利用可能な設定ファイル リファレンス ガイド Pre-Built CircleCI Docker Images Convenience Images cimg/base Docker コマンドの実行手順 Trivy を CircleCI で使う github.com/aquasecurity/trivy-ci-test DockleやTrivyをCircle CIのDocker Orbと組み合わせてセキュアなコンテナを継続的に作るっ！ (Qiita) CircleCI のローカル CLI の使用 CircleCIをtagでデプロイできるフローを整える 【CircleCI】CircleCIで特定のタグのpushだけを検知して行いたいジョブの定義 タグをプッシュした時にワークフローが走るようにする CircleCIでdockerイメージをbuild & pushする (Qiita) CircleCI を使用した GitHub リリースの自動化 (circleci blog) 環境変数の使用 Build a Docker image in one job and use it in another job 3分でできる！最高のDockerfileを書いたあとにやるべき1つのこと "},"vagrant/":{"url":"vagrant/","title":"Vagrant","keywords":"","body":"Vagrant Enable Experimental Feature https://www.vagrantup.com/docs/experimental "},"misc/":{"url":"misc/","title":"misc","keywords":"","body":"Misc Cognicull コグニカルは「分かりやすさ」と「心地良さ」を追求した学習サイトです。数学、自然科学、工学の知識を学習しやすいようにデザインされています。 The TCP/IP Guide terraform-docker-mirror terraform で docker image の mirror を作成する https://github.com/seatgeek/docker-mirror https://medium.com/rossum/how-to-overcome-docker-hub-pull-limits-in-a-kubernetes-cluster-382f317accc1 Apache Kafkaって本当に大丈夫？～故障検証のオーバービューと興味深い挙動の紹介～ https://kafka.apache.org/quickstart Apache Kafkaの概要とアーキテクチャ Keybase is secure messaging and file-sharing. https://book.keybase.io/ https://wiki.archlinux.jp/index.php/Keybase TcpDump Cheat sheet 【Tech Blog】Vulsを用いた脆弱性検出・管理フローの構築① RHEL 8 の cloud-init の設定および管理 PostgreSQL - ネットワークチェンジニアとして DKIM の署名を手動で付与してみる ISO 8601 と RFC 3339 の違いは T を許容するかどうか "}}